# Start writing code here...

import numpy as np
import pandas as pd
from scipy.stats import pearsonr, chi2_contingency
import matplotlib.pyplot as plt
import seaborn as sns

import codecademylib3
np.set_printoptions(suppress=True, precision = 2)

nba = pd.read_csv('./nba_games.csv')

# Subset Data to 2010 Season, 2014 Season
nba_2010 = nba[nba.year_id == 2010]
nba_2014 = nba[nba.year_id == 2014]

print(nba_2010.head())
print(nba_2014.head())

# store the Knicks and Nets points from 2010
knicks_pts = nba_2010.pts[nba_2010.fran_id == 'Knicks']
nets_pts = nba_2010.pts[nba_2010.fran_id == 'Nets']
print(len(nets_pts))

# difference in mean for Knicks and Nets
diff_means_2010 = knicks_pts.mean() - nets_pts.mean()
diff_np = np.mean(knicks_pts) - np.mean(nets_pts)
print(diff_means_2010)
print(diff_np)

# create overlapping histograms to compare
plt.hist(knicks_pts, alpha=0.8, normed=True, label='knicks')
plt.hist(nets_pts, alpha=0.8, normed=True, label='nets')
plt.legend()
plt.show()
plt.clf()

# repeat steps for 2014 for the Knicks and Nets
knicks_pts_2014 = nba_2014.pts[nba_2014.fran_id == 'Knicks']
nets_pts_2014 = nba_2014.pts[nba_2014.fran_id == 'Nets']
print(len(nets_pts_2014))
print(len(knicks_pts_2014))

# difference in mean for Knicks and Nets
diff_means_2014 = knicks_pts_2014.mean() - nets_pts_2014.mean()
diff_np_2014 = np.mean(knicks_pts_2014) - np.mean(nets_pts_2014)
print(diff_means_2014)
print(diff_np_2014)

# create overlapping histograms to compare
plt.hist(knicks_pts_2014, alpha=0.8, normed=True, label='knicks')
plt.hist(nets_pts_2014, alpha=0.8, normed=True, label='nets')
plt.legend()
plt.show()
plt.clf()

# side-by-side box plot of pts
sns.boxplot(data = nba_2010, x = 'fran_id', y = 'pts')
plt.show()
plt.clf()

# contigency table to analyze the relationship of the categorical variable of home/away and wins/losses
location_result_freq = pd.crosstab(nba_2010.game_location, nba_2010.game_result)
print(location_result_freq)

# convert from frequencies to proportions
location_result_proportions = location_result_freq / len(nba_2010)
print(location_result_proportions)

# use frequencies table to look at expected frequencies using the Chi-Square statistic
chi2, pval, dof, expected = chi2_contingency(location_result_freq)
print(expected)
print(chi2)

# analyze relationship between quantitative variables
covariance_table = np.cov(nba_2010.forecast, nba_2010.point_diff)
print(covariance_table)
# the covariance is 1.37, it appears twice in the covariance_table

# calculate the correclation between forecast and point_diff
forecast_point_diff_correlation, p = pearsonr(nba_2010.forecast, nba_2010.point_diff)
print(forecast_point_diff_correlation)
print(p)

# scatter plot of forecast on x-axis and point_diff on y-axis
plt.scatter('forecast', 'point_diff', data = nba_2010)
plt.xlabel('Forecasted Win Prob.')
plt.ylabel('Point Differential')
plt.show()
plt.clf()
# plt.clf() clears plt in order to allow to graph additional plots
